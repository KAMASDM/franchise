import React, { useState, useRef, useEffect } from "react";
import {
  Fab,
  Dialog,
  DialogTitle,
  DialogContent,
  Box,
  Button,
  Typography,
  Avatar,
  Paper,
  IconButton,
  Divider,
  CircularProgress,
  Chip,
  Card,
  CardContent,
  CardActions,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Badge,
  Grid,
  Stack,
} from "@mui/material";
import { 
  Chat as ChatIcon, 
  Close, 
  Support,
  Business,
  AttachMoney,
  LocationOn,
  TrendingUp,
  CheckCircle,
  Star,
  Launch
} from "@mui/icons-material";
import { useNavigate } from "react-router-dom";
import UserInfoForm from "./UserInfoForm";
import { db } from "../../firebase/firebase";
import { collection, query, where, getDocs, addDoc, serverTimestamp } from "firebase/firestore";
import NotificationService from "../../utils/NotificationService";
import { BrandMatchingService } from "../../utils/BrandMatchingService";
import { INVESTMENT_RANGES, INDUSTRIES } from "../../constants";
import { generateBrandSlug } from "../../utils/brandUtils";
import logger from "../../utils/logger";

const Chatbot = () => {
  const navigate = useNavigate();
  const [open, setOpen] = useState(false);
  const [chatPhase, setChatPhase] = useState("pre-chat");
  const [userInfo, setUserInfo] = useState(null);
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [currentQuestionStep, setCurrentQuestionStep] = useState(1);
  const [userResponses, setUserResponses] = useState({});
  const [brandsData, setBrandsData] = useState([]);
  const [matchedBrands, setMatchedBrands] = useState([]);
  const chatEndRef = useRef(null);

  const scrollToBottom = () => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Fetch approved brands when component mounts
  useEffect(() => {
    const fetchApprovedBrands = async () => {
      try {
        const brandsCollection = collection(db, "brands");
        const q = query(brandsCollection, where("status", "==", "active"));
        const querySnapshot = await getDocs(q);
        const brands = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setBrandsData(brands);
      } catch (error) {
        logger.error("Error fetching brands:", error);
      }
    };
    
    fetchApprovedBrands();
  }, []);

  // Smart brand matching using the dedicated service
  const findMatchingBrands = async (responses, userInfo) => {
    if (brandsData.length === 0) return [];

    // Transform responses to match BrandMatchingService format
    const userPreferences = {
      budget: userInfo.budget,
      location: userInfo.location,
      interests: [responses.industry],
      experience: responses.experience,
      timeline: responses.timeline,
      riskTolerance: responses.riskTolerance
    };

    try {
      const matches = await BrandMatchingService.matchBrands(userPreferences, brandsData);
      
      // Transform matches to include user-friendly reasons
      return matches.slice(0, 5).map(match => ({
        ...match.brand,
        matchScore: Math.round(match.matchScore),
        matchReasons: generateUserFriendlyReasons(match.matchFactors, responses, userInfo)
      }));
    } catch (error) {
      logger.error("Error in brand matching:", error);
      // Fallback to simple matching
      return brandsData
        .filter(brand => 
          brand.industries?.some(industry => 
            industry.toLowerCase().includes(responses.industry?.toLowerCase()) ||
            responses.industry?.toLowerCase().includes(industry.toLowerCase())
          )
        )
        .slice(0, 3)
        .map(brand => ({
          ...brand,
          matchScore: 75,
          matchReasons: [`Matches your interest in ${responses.industry}`, `Available in your location`]
        }));
    }
  };

  const generateUserFriendlyReasons = (matchFactors, responses, userInfo) => {
    const reasons = [];
    
    if (matchFactors.budgetScore > 70) {
      reasons.push(`Perfect fit for your budget of тВ╣${userInfo.budget}`);
    } else if (matchFactors.budgetScore > 50) {
      reasons.push(`Within your budget range`);
    }

    if (matchFactors.industryScore > 80) {
      reasons.push(`Excellent match for ${responses.industry} industry`);
    } else if (matchFactors.industryScore > 50) {
      reasons.push(`Related to your interest in ${responses.industry}`);
    }

    if (responses.experience === "No Business Experience") {
      reasons.push(`Comprehensive training and support for beginners`);
    } else if (responses.experience.includes("Experience")) {
      reasons.push(`Great opportunity for experienced investors`);
    }

    if (responses.riskTolerance === "Low Risk") {
      reasons.push(`Low-risk investment model`);
    } else if (responses.riskTolerance === "High Risk") {
      reasons.push(`High growth potential`);
    } else {
      reasons.push(`Balanced risk-return profile`);
    }

    return reasons.slice(0, 3); // Limit to top 3 reasons
  };

  const getGreeting = (name, budget, language = "English") => {
    const greetings = {
      English: `Hello ${name}! ЁЯСЛ I'm here to help you find the perfect franchise opportunity based on your preferences and budget of тВ╣${budget}.`,
      Hindi: `рдирдорд╕реНрддреЗ ${name}! ЁЯСЛ рдореИрдВ рдЖрдкрдХреА рдкрд╕рдВрдж рдФрд░ тВ╣${budget} рдХреЗ рдмрдЬрдЯ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рд╣реА рдлреНрд░реИрдВрдЪрд╛рдЗрдЬрд╝реА рдЕрд╡рд╕рд░ рдЦреЛрдЬрдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред`,
      Gujarati: `ркиркорк╕рлНркдрлЗ ${name}! ЁЯСЛ рк╣рлБркВ ркдркорк╛рк░рлА рккрк╕ркВркжркЧрлА ркЕркирлЗ тВ╣${budget} ркирк╛ ркмркЬрлЗркЯркирк╛ ркЖркзрк╛рк░рлЗ рк╕ркВрккрлВрк░рлНркг рклрлНрк░рлЗркирлНркЪрк╛ркЗркЭ ркдркХ рк╢рлЛркзрк╡рк╛ркорк╛ркВ ркдркоркирлЗ ркоркжркж ркХрк░рк╡рк╛ ркЕрк╣рлАркВ ркЫрлБркВред`,
      Marathi: `рдирдорд╕реНрдХрд╛рд░ ${name}! ЁЯСЛ рдореА рддреБрдордЪреНрдпрд╛ рдкрд╕рдВрддреАрдиреБрд╕рд╛рд░ рдЖрдгрд┐ тВ╣${budget} рдЪреНрдпрд╛ рдмрдЬреЗрдЯрд╡рд░ рдЖрдзрд╛рд░рд┐рдд рдпреЛрдЧреНрдп рдлреНрд░рдБрдЪрд╛рдпрдЭреА рд╕рдВрдзреА рд╢реЛрдзрдгреНрдпрд╛рдд рддреБрдореНрд╣рд╛рд▓рд╛ рдорджрдд рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдпреЗрдереЗ рдЖрд╣реЗред`,
      Tamil: `ро╡рогроХрпНроХроорпН ${name}! ЁЯСЛ роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокродрпНродро┐ро▒рпНроХрпБроорпН тВ╣${budget} рокроЯрпНроЬрпЖроЯрпНроЯро┐ро▒рпНроХрпБроорпН роПро▒рпНро▒ роЪро░ро┐ропро╛рой роЙро░ро┐роорпИропро╛ро│ро░рпН ро╡ро╛ропрпНрокрпНрокрпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роиро╛ройрпН роЗроЩрпНроХрпЗ роЙродро╡рпБроХро┐ро▒рпЗройрпН.`,
      Telugu: `р░ир░ор░╕р▒Нр░Хр░╛р░░р░В ${name}! ЁЯСЛ р░ор▒А р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░др░▓р▒Б р░ор░░р░┐р░пр▒Б тВ╣${budget} р░мр░бр▒Нр░Ьр▒Жр░Яр▒Н р░Жр░зр░╛р░░р░Вр░Чр░╛ р░╕р░░р▒Ир░и р░лр▒Нр░░р░╛р░Вр░Ър▒Ир░Ьр▒А р░Ер░╡р░Хр░╛р░╢р░╛р░ир▒Нр░ир░┐ р░Хр░ир▒Бр░Чр▒Кр░ир░бр░Вр░▓р▒Л р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б.`
    };
    return greetings[language] || greetings["English"];
  };

  const getRecommendationMessage = (count, language = "English") => {
    const messages = {
      English: `Perfect! Based on your preferences, I found ${count} franchise opportunities that match your criteria. Here are my top recommendations:`,
      Hindi: `рдмрдврд╝рд┐рдпрд╛! рдЖрдкрдХреА рдкрд╕рдВрдж рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдореБрдЭреЗ ${count} рдлреНрд░реИрдВрдЪрд╛рдЗрдЬрд╝реА рдЕрд╡рд╕рд░ рдорд┐рд▓реЗ рдЬреЛ рдЖрдкрдХреЗ рдорд╛рдирджрдВрдбреЛрдВ рд╕реЗ рдореЗрд▓ рдЦрд╛рддреЗ рд╣реИрдВред рдпрд╣рд╛рдБ рдореЗрд░реА рд╢реАрд░реНрд╖ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рд╣реИрдВ:`,
      Gujarati: `рк╕ркВрккрлВрк░рлНркг! ркдркорк╛рк░рлА рккрк╕ркВркжркЧрлАркирк╛ ркЖркзрк╛рк░рлЗ, ркоркирлЗ ${count} рклрлНрк░рлЗркирлНркЪрк╛ркЗркЭ ркдркХрлЛ ркорк│рлА ркЬрлЗ ркдркорк╛рк░рк╛ ркорк╛рккркжркВркб рк╕рк╛ркерлЗ ркорлЗрк│ ркЦрк╛ркп ркЫрлЗ. ркЕрк╣рлАркВ ркорк╛рк░рлА ркЯрлЛркЪркирлА ркнрк▓рк╛ркоркгрлЛ ркЫрлЗ:`,
      Marathi: `рдкрд░рд┐рдкреВрд░реНрдг! рддреБрдордЪреНрдпрд╛ рдкрд╕рдВрддреАрдиреБрд╕рд╛рд░, рдорд▓рд╛ ${count} рдлреНрд░рдБрдЪрд╛рдпрдЭреА рд╕рдВрдзреА рд╕рд╛рдкрдбрд▓реНрдпрд╛ рдЬреНрдпрд╛ рддреБрдордЪреНрдпрд╛ рдирд┐рдХрд╖рд╛рдВрд╢реА рдЬреБрд│рддрд╛рдд. рдпреЗрдереЗ рдорд╛рдЭреНрдпрд╛ рдЯреЙрдк рд╢рд┐рдлрд╛рд░рд╕реА рдЖрд╣реЗрдд:`,
      Tamil: `роЪро░ро┐ропро╛роХ! роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЙроЩрпНроХро│рпН родрпЗро╡рпИроХро│рпБроХрпНроХрпБ рокрпКро░рпБроирпНродрпБроорпН ${count} роЙро░ро┐роорпИропро╛ро│ро░рпН ро╡ро╛ропрпНрокрпНрокрпБроХро│рпИ роиро╛ройрпН роХрогрпНроЯрпЗройрпН. роЗродрпЛ роОройродрпБ роЪро┐ро▒роирпНрод рокро░ро┐роирпНродрпБро░рпИроХро│рпН:`,
      Telugu: `р░кр░░р▒Нр░лр▒Жр░Хр▒Нр░Яр▒Н! р░ор▒А р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░др░▓ р░Жр░зр░╛р░░р░Вр░Чр░╛, р░ор▒А р░кр▒Нр░░р░ор░╛р░гр░╛р░▓р░др▒Л р░╕р░░р░┐р░кр▒Лр░пр▒З ${count} р░лр▒Нр░░р░╛р░Вр░Ър▒Ир░Ьр▒А р░Ер░╡р░Хр░╛р░╢р░╛р░▓р▒Б р░ир▒Зр░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир▒Нр░ир░╛р░ир▒Б. р░Зр░жр░┐р░Чр▒Л р░ир░╛ р░Яр░╛р░кр▒Н р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б:`
    };
    return messages[language] || messages["English"];
  };

  const getNoMatchMessage = (language = "English") => {
    const messages = {
      English: `I couldn't find exact matches for your criteria, but don't worry! Our team will review your preferences and get back to you with personalized recommendations within 24 hours.\n\nIn the meantime, you can browse all available franchises on our platform.`,
      Hindi: `рдореБрдЭреЗ рдЖрдкрдХреЗ рдорд╛рдирджрдВрдбреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рдЯреАрдХ рдореЗрд▓ рдирд╣реАрдВ рдорд┐рд▓рд╛, рд▓реЗрдХрд┐рди рдЪрд┐рдВрддрд╛ рди рдХрд░реЗрдВ! рд╣рдорд╛рд░реА рдЯреАрдо рдЖрдкрдХреА рдкрд╕рдВрдж рдХреА рд╕рдореАрдХреНрд╖рд╛ рдХрд░реЗрдЧреА рдФрд░ 24 рдШрдВрдЯреЛрдВ рдХреЗ рднреАрддрд░ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд┐рдлрд╛рд░рд┐рд╢реЛрдВ рдХреЗ рд╕рд╛рде рдЖрдкрд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдЧреАред\n\nрдЗрд╕ рдмреАрдЪ, рдЖрдк рд╣рдорд╛рд░реЗ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдкрд░ рд╕рднреА рдЙрдкрд▓рдмреНрдз рдлреНрд░реИрдВрдЪрд╛рдЗрдЬрд╝реА рдмреНрд░рд╛рдЙрдЬрд╝ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред`,
      Gujarati: `ркоркирлЗ ркдркорк╛рк░рк╛ ркорк╛рккркжркВркб ркорк╛ркЯрлЗ ркЪрлЛркХрлНркХрк╕ ркорлЗрк│ ркорк│рлА рк╢ркХрлНркпрк╛ ркиркерлА, рккрк░ркВркдрлБ ркЪрк┐ркВркдрк╛ ркХрк░рк╢рлЛ ркирк╣рлАркВ! ркЕркорк╛рк░рлА ркЯрлАрко ркдркорк╛рк░рлА рккрк╕ркВркжркЧрлАркУркирлА рк╕ркорлАркХрлНрк╖рк╛ ркХрк░рк╢рлЗ ркЕркирлЗ 24 ркХрк▓рк╛ркХркирлА ркЕркВркжрк░ рк╡рлНркпркХрлНркдрк┐ркЧркд ркнрк▓рк╛ркоркгрлЛ рк╕рк╛ркерлЗ ркдркорк╛рк░рлЛ рк╕ркВрккрк░рлНркХ ркХрк░рк╢рлЗ.\n\nркоркзрлНркпрк╕рлНрке рк╕ркоркпрлЗ, ркдркорлЗ ркЕркорк╛рк░рк╛ рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко рккрк░ ркЙрккрк▓ркмрлНркз ркдркорк╛рко рклрлНрк░рлЗркирлНркЪрк╛ркЗркЭ ркмрлНрк░рк╛ркЙркЭ ркХрк░рлА рк╢ркХрлЛ ркЫрлЛ.`,
      Marathi: `рдорд▓рд╛ рддреБрдордЪреНрдпрд╛ рдирд┐рдХрд╖рд╛рдВрд╕рд╛рдареА рдЕрдЪреВрдХ рдЬреБрд│рдгреА рд╕рд╛рдкрдбрд▓реА рдирд╛рд╣реА, рдкрдг рдХрд╛рд│рдЬреА рдХрд░реВ рдирдХрд╛! рдЖрдордЪреА рдЯреАрдо рддреБрдордЪреНрдпрд╛ рдкрд╕рдВрддреАрдВрдЪреЗ рдкреБрдирд░рд╛рд╡рд▓реЛрдХрди рдХрд░реЗрд▓ рдЖрдгрд┐ 24 рддрд╛рд╕рд╛рдВрдЪреНрдпрд╛ рдЖрдд рд╡реИрдпрдХреНрддрд┐рдХ рд╢рд┐рдлрд╛рд░рд╢реАрдВрд╕рд╣ рддреБрдордЪреНрдпрд╛рд╢реА рд╕рдВрдкрд░реНрдХ рд╕рд╛рдзреЗрд▓.\n\nрджрд░рдореНрдпрд╛рди, рддреБрдореНрд╣реА рдЖрдордЪреНрдпрд╛ рдкреНрд▓реЕрдЯрдлреЙрд░реНрдорд╡рд░ рдЙрдкрд▓рдмреНрдз рд╕рд░реНрд╡ рдлреНрд░рдБрдЪрд╛рдпрдЭреА рдмреНрд░рд╛рдЙрдЭ рдХрд░реВ рд╢рдХрддрд╛.`,
      Tamil: `роЙроЩрпНроХро│рпН родрпЗро╡рпИроХро│рпБроХрпНроХрпБ роЪро░ро┐ропро╛рой рокрпКро░рпБродрпНродроЩрпНроХро│рпН роОройроХрпНроХрпБ роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ, роЖройро╛ро▓рпН роХро╡ро▓рпИрокрпНрокроЯ ро╡рпЗрогрпНроЯро╛роорпН! роОроЩрпНроХро│рпН роХрпБро┤рпБ роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИ роородро┐рокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНродрпБ 24 роорогро┐ роирпЗро░родрпНродро┐ро▒рпНроХрпБро│рпН родройро┐рокрпНрокропройрпН рокро░ро┐роирпНродрпБро░рпИроХро│рпБроЯройрпН роЙроЩрпНроХро│рпИродрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБроорпН.\n\nроЗродро▒рпНроХро┐роЯрпИропро┐ро▓рпН, роОроЩрпНроХро│рпН родро│родрпНродро┐ро▓рпН роХро┐роЯрпИроХрпНроХрпБроорпН роЕройрпИродрпНродрпБ роЙро░ро┐роорпИропро╛ро│ро░рпНроХро│рпИропрпБроорпН роирпАроЩрпНроХро│рпН рокро╛ро░рпНроХрпНроХро▓ро╛роорпН.`,
      Telugu: `р░ор▒А р░кр▒Нр░░р░ор░╛р░гр░╛р░▓р░Хр▒Б р░╕р░░р░┐р░Чр▒Нр░Чр░╛ р░╕р░░р░┐р░кр▒Лр░пр▒Зр░╡р░┐ р░ир░╛р░Хр▒Б р░Хр░ир░┐р░кр░┐р░Вр░Ър░▓р▒Зр░жр▒Б, р░Хр░╛р░ир▒А р░Ър░┐р░Вр░др░┐р░Вр░Ър░Хр░Вр░бр░┐! р░ор░╛ р░мр▒Гр░Вр░жр░В р░ор▒А р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░др░▓р░ир▒Б р░╕р░ор▒Ар░Хр▒Нр░╖р░┐р░Вр░Ър░┐ 24 р░Чр░Вр░Яр░▓р▒Нр░▓р▒Л р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р░др▒Л р░ор░┐р░ор▒Нр░ор░▓р▒Нр░ир░┐ р░╕р░Вр░кр▒Нр░░р░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.\n\nр░И р░ор░зр▒Нр░пр░Хр░╛р░▓р░Вр░▓р▒Л, р░ор▒Ар░░р▒Б р░ор░╛ р░кр▒Нр░▓р░╛р░Яр▒НтАМр░лр░╛р░░р░ор▒НтАМр░▓р▒Л р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░Йр░ир▒Нр░и р░Ер░ир▒Нр░ир░┐ р░лр▒Нр░░р░╛р░Вр░Ър▒Ир░Ьр▒Ар░▓р░ир▒Б р░мр▒Нр░░р▒Мр░Ьр▒Н р░Ър▒Зр░пр░╡р░Ър▒Нр░Ър▒Б.`
    };
    return messages[language] || messages["English"];
  };

  const getButtonText = (buttonType, language = "English") => {
    const texts = {
      viewDetails: {
        English: "View Details & Inquire",
        Hindi: "рд╡рд┐рд╡рд░рдг рджреЗрдЦреЗрдВ рдФрд░ рдкреВрдЫрддрд╛рдЫ рдХрд░реЗрдВ",
        Gujarati: "рк╡рк┐ркЧркдрлЛ ркЬрлБркУ ркЕркирлЗ рккрлВркЫрккрк░ркЫ ркХрк░рлЛ",
        Marathi: "рддрдкрд╢реАрд▓ рдкрд╣рд╛ рдЖрдгрд┐ рдЪреМрдХрд╢реА рдХрд░рд╛",
        Tamil: "ро╡ро┐ро╡ро░роЩрпНроХро│рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН рооро▒рпНро▒рпБроорпН ро╡ро┐роЪро╛ро░ро┐роХрпНроХро╡рпБроорпН",
        Telugu: "р░╡р░┐р░╡р░░р░╛р░▓р▒Б р░Ър▒Вр░бр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░╡р░┐р░Ър░╛р░░р░┐р░Вр░Ър░Вр░бр░┐"
      },
      browseAll: {
        English: "Browse All Franchises",
        Hindi: "рд╕рднреА рдлреНрд░реИрдВрдЪрд╛рдЗрдЬрд╝реА рдмреНрд░рд╛рдЙрдЬрд╝ рдХрд░реЗрдВ",
        Gujarati: "ркдркорк╛рко рклрлНрк░рлЗркирлНркЪрк╛ркЗркЭ ркмрлНрк░рк╛ркЙркЭ ркХрк░рлЛ",
        Marathi: "рд╕рд░реНрд╡ рдлреНрд░рдБрдЪрд╛рдпрдЭреА рдмреНрд░рд╛рдЙрдЭ рдХрд░рд╛",
        Tamil: "роЕройрпИродрпНродрпБ роЙро░ро┐роорпИропро╛ро│ро░рпНроХро│рпИропрпБроорпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
        Telugu: "р░Ер░ир▒Нр░ир░┐ р░лр▒Нр░░р░╛р░Вр░Ър▒Ир░Ьр▒Ар░▓р░ир▒Б р░мр▒Нр░░р▒Мр░Ьр▒Н р░Ър▒Зр░пр░Вр░бр░┐"
      },
      opensInNewTab: {
        English: "Opens in new tab",
        Hindi: "рдирдП рдЯреИрдм рдореЗрдВ рдЦреБрд▓рддрд╛ рд╣реИ",
        Gujarati: "ркирк╡рк╛ ркЯрлЗркмркорк╛ркВ ркЦрлБрк▓рлЗ ркЫрлЗ",
        Marathi: "рдирд╡реАрди рдЯреЕрдмрдордзреНрдпреЗ рдЙрдШрдбрддреЗ",
        Tamil: "рокрпБродро┐роп родро╛ро╡ро▓ро┐ро▓рпН родро┐ро▒роХрпНроХро┐ро▒родрпБ",
        Telugu: "р░Хр▒Кр░др▒Нр░д р░Яр▒Нр░пр░╛р░мр▒НтАМр░▓р▒Л р░др▒Жр░░р▒Бр░Ър▒Бр░Хр▒Бр░Вр░Яр▒Бр░Вр░жр░┐"
      }
    };
    return texts[buttonType]?.[language] || texts[buttonType]?.["English"] || "";
  };

  const saveChatLead = async (responses, userInfo) => {
    try {
      const chatLeadsCollection = collection(db, "chatLeads");
      const leadData = {
        userInfo: userInfo,
        responses: responses,
        createdAt: serverTimestamp(),
        status: "New",
        source: "chatbot",
        matchedBrands: matchedBrands.map(b => ({
          brandId: b.id,
          brandName: b.brandName,
          matchScore: b.matchScore,
          matchReasons: b.matchReasons
        }))
      };
      
      const docRef = await addDoc(chatLeadsCollection, leadData);
      
      // Send notification to admins about new chat lead
      await NotificationService.sendAdminNotification(
        `New chat lead from ${userInfo?.name || 'Anonymous'} - Interested in ${responses.industry}`,
        {
          type: "chat_lead",
          leadId: docRef.id,
          prospectName: userInfo?.name,
          location: userInfo?.location,
          budget: userInfo?.budget,
          industry: responses.industry
        }
      );
      
      return docRef.id;
    } catch (error) {
      logger.error("Error saving chat lead:", error);
    }
  };

  // Updated question flow with franchise-specific questions
  const getQuestionData = (step, language = "English") => {
    const questions = {
      1: {
        English: {
          question: "Which industry interests you most for franchise investment?",
          options: [
            { key: "food", label: "Food & Beverage", description: "Restaurants, Cafes, Quick Service" },
            { key: "retail", label: "Retail", description: "Clothing, Electronics, Consumer Goods" },
            { key: "healthcare", label: "Healthcare", description: "Clinics, Wellness Centers, Pharmacies" },
            { key: "education", label: "Education", description: "Coaching, Training, Schools" },
            { key: "fitness", label: "Fitness", description: "Gyms, Yoga Studios, Sports" },
            { key: "beauty", label: "Beauty & Wellness", description: "Salons, Spas, Beauty Services" },
            { key: "services", label: "Services", description: "Cleaning, Repair, Consulting" },
            { key: "other", label: "Other", description: "Explore other opportunities" }
          ]
        },
        Hindi: {
          question: "рдлреНрд░реИрдВрдЪрд╛рдЗрдЬрд╝реА рдирд┐рд╡реЗрд╢ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдХреМрди рд╕рд╛ рдЙрджреНрдпреЛрдЧ рд╕рдмрд╕реЗ рдЕрдзрд┐рдХ рд░реБрдЪрд┐рдХрд░ рд▓рдЧрддрд╛ рд╣реИ?",
          options: [
            { key: "food", label: "рдЦрд╛рджреНрдп рдФрд░ рдкреЗрдп", description: "рд░реЗрд╕реНрдЯреЛрд░реЗрдВрдЯ, рдХреИрдлреЗ, рддреНрд╡рд░рд┐рдд рд╕реЗрд╡рд╛" },
            { key: "retail", label: "рд░рд┐рдЯреЗрд▓", description: "рдХрдкрдбрд╝реЗ, рдЗрд▓реЗрдХреНрдЯреНрд░реЙрдирд┐рдХреНрд╕, рдЙрдкрднреЛрдХреНрддрд╛ рд╡рд╕реНрддреБрдПрдВ" },
            { key: "healthcare", label: "рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛", description: "рдХреНрд▓рд┐рдирд┐рдХ, рд╡реЗрд▓рдиреЗрд╕ рд╕реЗрдВрдЯрд░, рдлрд╛рд░реНрдореЗрд╕реА" },
            { key: "education", label: "рд╢рд┐рдХреНрд╖рд╛", description: "рдХреЛрдЪрд┐рдВрдЧ, рдкреНрд░рд╢рд┐рдХреНрд╖рдг, рд╕реНрдХреВрд▓" },
            { key: "fitness", label: "рдлрд┐рдЯрдиреЗрд╕", description: "рдЬрд┐рдо, рдпреЛрдЧ рд╕реНрдЯреВрдбрд┐рдпреЛ, рдЦреЗрд▓" },
            { key: "beauty", label: "рд╕реМрдВрджрд░реНрдп рдФрд░ рдХрд▓реНрдпрд╛рдг", description: "рд╕реИрд▓реВрди, рд╕реНрдкрд╛, рд╕реМрдВрджрд░реНрдп рд╕реЗрд╡рд╛рдПрдВ" },
            { key: "services", label: "рд╕реЗрд╡рд╛рдПрдВ", description: "рд╕рдлрд╛рдИ, рдорд░рдореНрдордд, рдкрд░рд╛рдорд░реНрд╢" },
            { key: "other", label: "рдЕрдиреНрдп", description: "рдЕрдиреНрдп рдЕрд╡рд╕рд░реЛрдВ рдХрд╛ рдЕрдиреНрд╡реЗрд╖рдг рдХрд░реЗрдВ" }
          ]
        },
        Gujarati: {
          question: "рклрлНрк░рлЗркирлНркЪрк╛ркЗркЭ рк░рлЛркХрк╛ркг ркорк╛ркЯрлЗ ркдркоркирлЗ ркХркпрк╛ ркЙркжрлНркпрлЛркЧркорк╛ркВ рк╕рлМркерлА рк╡ркзрлБ рк░рк╕ ркЫрлЗ?",
          options: [
            { key: "food", label: "ркЦрлЛрк░рк╛ркХ ркЕркирлЗ рккрлАркгрк╛ркВ", description: "рк░рлЗрк╕рлНркЯрлЛрк░ркирлНркЯ, ркХрк╛рклрлЗ, ркЭркбрккрлА рк╕рлЗрк╡рк╛" },
            { key: "retail", label: "рк░рк┐ркЯрлЗрк▓", description: "ркХрккркбрк╛ркВ, ркЗрк▓рлЗркХрлНркЯрлНрк░рлЛркирк┐ркХрлНрк╕, ркЧрлНрк░рк╛рк╣ркХ ркЪрлАркЬрк╡рк╕рлНркдрлБркУ" },
            { key: "healthcare", label: "ркЖрк░рлЛркЧрлНркпрк╕рлЗрк╡рк╛", description: "ркХрлНрк▓рк┐ркирк┐ркХ, рк╡рлЗрк▓ркирлЗрк╕ рк╕рлЗркирлНркЯрк░, рклрк╛рк░рлНркорк╕рлА" },
            { key: "education", label: "рк╢рк┐ркХрлНрк╖ркг", description: "ркХрлЛркЪрк┐ркВркЧ, ркдрк╛рк▓рлАрко, рк╢рк╛рк│рк╛ркУ" },
            { key: "fitness", label: "рклрк┐ркЯркирлЗрк╕", description: "ркЬрк┐рко, ркпрлЛркЧ рк╕рлНркЯрлБркбрк┐ркпрлЛ, рк░ркоркдрлЛ" },
            { key: "beauty", label: "рк╕рлМркВркжрк░рлНркп ркЕркирлЗ ркХрк▓рлНркпрк╛ркг", description: "рк╕рк▓рлВрки, рк╕рлНрккрк╛, рк╕рлМркВркжрк░рлНркп рк╕рлЗрк╡рк╛ркУ" },
            { key: "services", label: "рк╕рлЗрк╡рк╛ркУ", description: "рк╕рклрк╛ркИ, рк╕ркорк╛рк░ркХрк╛рко, рккрк░рк╛ркорк░рлНрк╢" },
            { key: "other", label: "ркЕркирлНркп", description: "ркЕркирлНркп ркдркХрлЛркирлБркВ ркЕркирлНрк╡рлЗрк╖ркг ркХрк░рлЛ" }
          ]
        },
        Marathi: {
          question: "рдлреНрд░рдБрдЪрд╛рдпрдЭреА рдЧреБрдВрддрд╡рдгреБрдХреАрд╕рд╛рдареА рддреБрдореНрд╣рд╛рд▓рд╛ рдХреЛрдгрддреНрдпрд╛ рдЙрджреНрдпреЛрдЧрд╛рдд рд╕рд░реНрд╡рд╛рдзрд┐рдХ рд░рд╕ рдЖрд╣реЗ?",
          options: [
            { key: "food", label: "рдЕрдиреНрди рдЖрдгрд┐ рдкреЗрдп", description: "рд░реЗрд╕реНрдЯреЙрд░рдВрдЯ, рдХреЕрдлреЗ, рджреНрд░реБрдд рд╕реЗрд╡рд╛" },
            { key: "retail", label: "рдХрд┐рд░рдХреЛрд│", description: "рдХрдкрдбреЗ, рдЗрд▓реЗрдХреНрдЯреНрд░реЙрдирд┐рдХреНрд╕, рдЧреНрд░рд╛рд╣рдХ рд╡рд╕реНрддреВ" },
            { key: "healthcare", label: "рдЖрд░реЛрдЧреНрдпрд╕реЗрд╡рд╛", description: "рдХреНрд▓рд┐рдирд┐рдХ, рд╡реЗрд▓рдиреЗрд╕ рд╕реЗрдВрдЯрд░, рдлрд╛рд░реНрдорд╕реА" },
            { key: "education", label: "рд╢рд┐рдХреНрд╖рдг", description: "рдХреЛрдЪрд┐рдВрдЧ, рдкреНрд░рд╢рд┐рдХреНрд╖рдг, рд╢рд╛рд│рд╛" },
            { key: "fitness", label: "рдлрд┐рдЯрдиреЗрд╕", description: "рдЬрд┐рдо, рдпреЛрдЧ рд╕реНрдЯреБрдбрд┐рдУ, рдЦреЗрд│" },
            { key: "beauty", label: "рд╕реМрдВрджрд░реНрдп рдЖрдгрд┐ рдирд┐рд░реЛрдЧреАрдкрдгрд╛", description: "рд╕рд▓реВрди, рд╕реНрдкрд╛, рд╕реМрдВрджрд░реНрдп рд╕реЗрд╡рд╛" },
            { key: "services", label: "рд╕реЗрд╡рд╛", description: "рд╕реНрд╡рдЪреНрдЫрддрд╛, рджреБрд░реБрд╕реНрддреА, рд╕рд▓реНрд▓рд╛рдорд╕рд▓рдд" },
            { key: "other", label: "рдЗрддрд░", description: "рдЗрддрд░ рд╕рдВрдзреАрдВрдЪрд╛ рд╢реЛрдз рдШреНрдпрд╛" }
          ]
        },
        Tamil: {
          question: "роЙро░ро┐роорпИропро╛ро│ро░рпН роорпБродро▓рпАроЯрпНроЯро┐ро▒рпНроХрпБ роОроирпНродродрпН родрпБро▒рпИ роЙроЩрпНроХро│рпБроХрпНроХрпБ роЕродро┐роХ роЖро░рпНро╡рооро╛роХ роЙро│рпНро│родрпБ?",
          options: [
            { key: "food", label: "роЙрогро╡рпБ рооро▒рпНро▒рпБроорпН рокро╛ройроорпН", description: "роЙрогро╡роХроЩрпНроХро│рпН, роХроГрокрпЗ, ро╡ро┐ро░рпИро╡рпБ роЪрпЗро╡рпИ" },
            { key: "retail", label: "роЪро┐ро▓рпНро▓ро▒рпИ", description: "роЖроЯрпИ, рооро┐ройрпНройрогрпБро╡ро┐ропро▓рпН, роирпБроХро░рпНро╡рпЛро░рпН рокрпКро░рпБроЯрпНроХро│рпН" },
            { key: "healthcare", label: "роЪрпБроХро╛родро╛ро░роорпН", description: "рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпН, ро╡рпЖро▓рпНройрпЖро╕рпН роорпИропроЩрпНроХро│рпН, рооро░рпБроирпНродроХроЩрпНроХро│рпН" },
            { key: "education", label: "роХро▓рпНро╡ро┐", description: "рокропро┐ро▒рпНроЪро┐, рокропро┐ро▒рпНроЪро┐ роорпИропроЩрпНроХро│рпН, рокро│рпНро│ро┐роХро│рпН" },
            { key: "fitness", label: "роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐", description: "роЬро┐роорпН, ропрпЛроХро╛ ро╕рпНроЯрпБроЯро┐ропрпЛ, ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ" },
            { key: "beauty", label: "роЕро┤роХрпБ рооро▒рпНро▒рпБроорпН роЖро░рпЛроХрпНроХро┐ропроорпН", description: "роЪро▓рпВройрпНроХро│рпН, ро╕рпНрокро╛, роЕро┤роХрпБ роЪрпЗро╡рпИроХро│рпН" },
            { key: "services", label: "роЪрпЗро╡рпИроХро│рпН", description: "роЪрпБродрпНродроорпН, рокро┤рпБродрпБрокро╛ро░рпНродрпНродро▓рпН, роЖро▓рпЛроЪройрпИ" },
            { key: "other", label: "рооро▒рпНро▒ро╡рпИ", description: "рокро┐ро▒ ро╡ро╛ропрпНрокрпНрокрпБроХро│рпИ роЖро░ро╛ропрпБроЩрпНроХро│рпН" }
          ]
        },
        Telugu: {
          question: "р░лр▒Нр░░р░╛р░Вр░Ър▒Ир░Ьр▒А р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐р░Хр░┐ р░ор▒Ар░Хр▒Б р░П р░кр░░р░┐р░╢р▒Нр░░р░ор░▓р▒Л р░Ор░Хр▒Нр░Хр▒Бр░╡ р░Жр░╕р░Хр▒Нр░др░┐ р░Йр░Вр░жр░┐?",
          options: [
            { key: "food", label: "р░Жр░╣р░╛р░░р░В р░ор░░р░┐р░пр▒Б р░кр░╛р░ир▒Ар░пр░╛р░▓р▒Б", description: "р░░р▒Жр░╕р▒Нр░Яр░╛р░░р▒Жр░Вр░Яр▒Нр░▓р▒Б, р░Хр▒Зр░лр▒НтАМр░▓р▒Б, р░др▒Нр░╡р░░р░┐р░д р░╕р▒Зр░╡" },
            { key: "retail", label: "р░░р░┐р░Яр▒Ир░▓р▒Н", description: "р░╡р░╕р▒Нр░др▒Нр░░р░╛р░▓р▒Б, р░Ор░▓р░Хр▒Нр░Яр▒Нр░░р░╛р░ир░┐р░Хр▒Нр░╕р▒Н, р░╡р░┐р░ир░┐р░пр▒Лр░Чр░жр░╛р░░р▒Б р░╡р░╕р▒Нр░др▒Бр░╡р▒Бр░▓р▒Б" },
            { key: "healthcare", label: "р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░Вр░░р░Хр▒Нр░╖р░г", description: "р░Хр▒Нр░▓р░┐р░ир░┐р░Хр▒НтАМр░▓р▒Б, р░╡р▒Жр░▓р▒НтАМр░ир▒Жр░╕р▒Н р░╕р▒Жр░Вр░Яр░░р▒Нр░▓р▒Б, р░лр░╛р░░р▒Нр░ор░╕р▒Ар░▓р▒Б" },
            { key: "education", label: "р░╡р░┐р░жр▒Нр░п", description: "р░Хр▒Лр░Ър░┐р░Вр░Чр▒Н, р░╢р░┐р░Хр▒Нр░╖р░г, р░кр░╛р░ар░╢р░╛р░▓р░▓р▒Б" },
            { key: "fitness", label: "р░лр░┐р░Яр▒НтАМр░ир▒Жр░╕р▒Н", description: "р░Ьр░┐р░ор▒НтАМр░▓р▒Б, р░пр▒Лр░Чр░╛ р░╕р▒Нр░Яр▒Вр░бр░┐р░пр▒Лр░▓р▒Б, р░Хр▒Нр░░р▒Ар░бр░▓р▒Б" },
            { key: "beauty", label: "р░Ер░Вр░жр░В р░ор░░р░┐р░пр▒Б р░Жр░░р▒Лр░Чр▒Нр░пр░В", description: "р░╕р░▓р▒Вр░ир▒Нр░▓р▒Б, р░╕р▒Нр░кр░╛р░▓р▒Б, р░Ер░Вр░жр░В р░╕р▒Зр░╡р░▓р▒Б" },
            { key: "services", label: "р░╕р▒Зр░╡р░▓р▒Б", description: "р░╢р▒Бр░нр▒Нр░░р░кр░░р░Ър░бр░В, р░ор░░р░ор▒Нр░ор░др▒Нр░др▒Б, р░╕р░▓р░╣р░╛" },
            { key: "other", label: "р░Зр░др░░", description: "р░Зр░др░░ р░Ер░╡р░Хр░╛р░╢р░╛р░▓р░ир▒Б р░Ер░ир▒Нр░╡р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐" }
          ]
        }
      },
      2: {
        English: {
          question: "What's your business experience level?",
          options: [
            { key: "none", label: "No Business Experience", description: "First-time entrepreneur" },
            { key: "some", label: "Some Business Experience", description: "1-3 years in business" },
            { key: "experienced", label: "Experienced", description: "3+ years running a business" },
            { key: "franchise", label: "Franchise Experience", description: "Previously owned franchises" }
          ]
        },
        Hindi: {
          question: "рдЖрдкрдХрд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЕрдиреБрднрд╡ рдХрд╛ рд╕реНрддрд░ рдХреНрдпрд╛ рд╣реИ?",
          options: [
            { key: "none", label: "рдХреЛрдИ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЕрдиреБрднрд╡ рдирд╣реАрдВ", description: "рдкрд╣рд▓реА рдмрд╛рд░ рдЙрджреНрдпрдореА" },
            { key: "some", label: "рдХреБрдЫ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЕрдиреБрднрд╡", description: "рд╡реНрдпрд╡рд╕рд╛рдп рдореЗрдВ 1-3 рд╕рд╛рд▓" },
            { key: "experienced", label: "рдЕрдиреБрднрд╡реА", description: "3+ рд╕рд╛рд▓ рд╡реНрдпрд╡рд╕рд╛рдп рдЪрд▓рд╛рдиреЗ рдХрд╛ рдЕрдиреБрднрд╡" },
            { key: "franchise", label: "рдлреНрд░реИрдВрдЪрд╛рдЗрдЬрд╝реА рдЕрдиреБрднрд╡", description: "рдкрд╣рд▓реЗ рдлреНрд░реИрдВрдЪрд╛рдЗрдЬрд╝реА рдХрд╛ рдорд╛рд▓рд┐рдХ рд░рд╣рд╛ рд╣реИ" }
          ]
        },
        Gujarati: {
          question: "ркдркорк╛рк░рлБркВ рк╡рлНркпрк╡рк╕рк╛ркпрк┐ркХ ркЕркирлБркнрк╡ рк╕рлНркдрк░ рк╢рлБркВ ркЫрлЗ?",
          options: [
            { key: "none", label: "ркХрлЛркИ рк╡рлНркпрк╡рк╕рк╛ркпрк┐ркХ ркЕркирлБркнрк╡ ркиркерлА", description: "рккрлНрк░ркерко рк╡ркЦркд ркЙркжрлНркпрлЛркЧрк╕рк╛рк╣рк╕рк┐ркХ" },
            { key: "some", label: "ркерлЛркбрлЛ рк╡рлНркпрк╡рк╕рк╛ркпрк┐ркХ ркЕркирлБркнрк╡", description: "рк╡рлНркпрк╡рк╕рк╛ркпркорк╛ркВ 1-3 рк╡рк░рлНрк╖" },
            { key: "experienced", label: "ркЕркирлБркнрк╡рлА", description: "3+ рк╡рк░рлНрк╖ рк╡рлНркпрк╡рк╕рк╛ркп ркЪрк▓рк╛рк╡рк╡рк╛ркирлЛ ркЕркирлБркнрк╡" },
            { key: "franchise", label: "рклрлНрк░рлЗркирлНркЪрк╛ркЗркЭ ркЕркирлБркнрк╡", description: "ркЕркЧрк╛ркЙ рклрлНрк░рлЗркирлНркЪрк╛ркЗркЭркирк╛ ркорк╛рк▓рк┐ркХ рк╣ркдрк╛" }
          ]
        },
        Marathi: {
          question: "рддреБрдордЪрд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЕрдиреБрднрд╡ рд╕реНрддрд░ рдХрд╛рдп рдЖрд╣реЗ?",
          options: [
            { key: "none", label: "рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЕрдиреБрднрд╡ рдирд╛рд╣реА", description: "рдкреНрд░рдердо рд╡реЗрд│ рдЙрджреНрдпреЛрдЬрдХ" },
            { key: "some", label: "рдХрд╛рд╣реА рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЕрдиреБрднрд╡", description: "рд╡реНрдпрд╡рд╕рд╛рдпрд╛рдд 1-3 рд╡рд░реНрд╖реЗ" },
            { key: "experienced", label: "рдЕрдиреБрднрд╡реА", description: "3+ рд╡рд░реНрд╖реЗ рд╡реНрдпрд╡рд╕рд╛рдп рдЪрд╛рд▓рд╡рдгреНрдпрд╛рдЪрд╛ рдЕрдиреБрднрд╡" },
            { key: "franchise", label: "рдлреНрд░рдБрдЪрд╛рдпрдЭреА рдЕрдиреБрднрд╡", description: "рдкреВрд░реНрд╡реА рдлреНрд░рдБрдЪрд╛рдпрдЭреАрдЪреЗ рдорд╛рд▓рдХ рд╣реЛрддреЗ" }
          ]
        },
        Tamil: {
          question: "роЙроЩрпНроХро│рпН ро╡рогро┐роХ роЕройрпБрокро╡ роиро┐ро▓рпИ роОройрпНрой?",
          options: [
            { key: "none", label: "ро╡рогро┐роХ роЕройрпБрокро╡роорпН роЗро▓рпНро▓рпИ", description: "роорпБродро▓рпН роорпБро▒рпИропро╛роХ родрпКро┤ро┐ро▓рпНроорпБройрпИро╡рпЛро░рпН" },
            { key: "some", label: "роЪро┐ро▓ ро╡рогро┐роХ роЕройрпБрокро╡роорпН", description: "ро╡рогро┐роХродрпНродро┐ро▓рпН 1-3 роЖрогрпНроЯрпБроХро│рпН" },
            { key: "experienced", label: "роЕройрпБрокро╡роорпН ро╡ро╛ропрпНроирпНрод", description: "3+ роЖрогрпНроЯрпБроХро│рпН ро╡рогро┐роХроорпН роироЯродрпНродро┐роп роЕройрпБрокро╡роорпН" },
            { key: "franchise", label: "роЙро░ро┐роорпИропро╛ро│ро░рпН роЕройрпБрокро╡роорпН", description: "роорпБройрпНрокрпБ роЙро░ро┐роорпИропро╛ро│ро░рпН роЙроЯрпИроорпИропро╛ро│ро░рпН" }
          ]
        },
        Telugu: {
          question: "р░ор▒А р░╡р▒Нр░пр░╛р░кр░╛р░░ р░Ер░ир▒Бр░нр░╡ р░╕р▒Нр░ер░╛р░пр░┐ р░Пр░ор░┐р░Яр░┐?",
          options: [
            { key: "none", label: "р░╡р▒Нр░пр░╛р░кр░╛р░░ р░Ер░ир▒Бр░нр░╡р░В р░▓р▒Зр░жр▒Б", description: "р░ор▒Кр░жр░Яр░┐р░╕р░╛р░░р░┐ р░╡р▒Нр░пр░╡р░╕р▒Нр░ер░╛р░кр░Хр▒Бр░бр▒Б" },
            { key: "some", label: "р░Хр▒Кр░Вр░д р░╡р▒Нр░пр░╛р░кр░╛р░░ р░Ер░ир▒Бр░нр░╡р░В", description: "р░╡р▒Нр░пр░╛р░кр░╛р░░р░Вр░▓р▒Л 1-3 р░╕р░Вр░╡р░др▒Нр░╕р░░р░╛р░▓р▒Б" },
            { key: "experienced", label: "р░Ер░ир▒Бр░нр░╡р░Ьр▒Нр░Юр▒Бр░бр▒Б", description: "3+ р░╕р░Вр░╡р░др▒Нр░╕р░░р░╛р░▓р▒Б р░╡р▒Нр░пр░╛р░кр░╛р░░р░В р░ир░бр░┐р░кр░┐р░и р░Ер░ир▒Бр░нр░╡р░В" },
            { key: "franchise", label: "р░лр▒Нр░░р░╛р░Вр░Ър▒Ир░Ьр▒А р░Ер░ир▒Бр░нр░╡р░В", description: "р░Чр░др░Вр░▓р▒Л р░лр▒Нр░░р░╛р░Вр░Ър▒Ир░Ьр▒Ар░▓р░ир▒Б р░Хр░▓р░┐р░Чр░┐ р░Йр░ир▒Нр░ир░╛р░░р▒Б" }
          ]
        }
      },
      3: {
        English: {
          question: "What's your risk tolerance for this investment?",
          options: [
            { key: "low", label: "Low Risk", description: "Prefer established, safe franchises" },
            { key: "moderate", label: "Moderate Risk", description: "Balanced approach to risk and returns" },
            { key: "high", label: "High Risk", description: "Willing to take risks for higher returns" }
          ]
        },
        Hindi: {
          question: "рдЗрд╕ рдирд┐рд╡реЗрд╢ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреА рдЬреЛрдЦрд┐рдо рд╕рд╣рдирд╢реАрд▓рддрд╛ рдХреНрдпрд╛ рд╣реИ?",
          options: [
            { key: "low", label: "рдХрдо рдЬреЛрдЦрд┐рдо", description: "рд╕реНрдерд╛рдкрд┐рдд, рд╕реБрд░рдХреНрд╖рд┐рдд рдлреНрд░реИрдВрдЪрд╛рдЗрдЬрд╝реА рдкрд╕рдВрдж рдХрд░рддреЗ рд╣реИрдВ" },
            { key: "moderate", label: "рдордзреНрдпрдо рдЬреЛрдЦрд┐рдо", description: "рдЬреЛрдЦрд┐рдо рдФрд░ рд░рд┐рдЯрд░реНрди рдХрд╛ рд╕рдВрддреБрд▓рд┐рдд рджреГрд╖реНрдЯрд┐рдХреЛрдг" },
            { key: "high", label: "рдЙрдЪреНрдЪ рдЬреЛрдЦрд┐рдо", description: "рдЕрдзрд┐рдХ рд░рд┐рдЯрд░реНрди рдХреЗ рд▓рд┐рдП рдЬреЛрдЦрд┐рдо рд▓реЗрдиреЗ рдХреЛ рддреИрдпрд╛рд░" }
          ]
        },
        Gujarati: {
          question: "ркЖ рк░рлЛркХрк╛ркг ркорк╛ркЯрлЗ ркдркорк╛рк░рлА ркЬрлЛркЦрко рк╕рк╣ркирк╢рлАрк▓ркдрк╛ рк╢рлБркВ ркЫрлЗ?",
          options: [
            { key: "low", label: "ркУркЫрлБркВ ркЬрлЛркЦрко", description: "рк╕рлНркерк╛рккрк┐ркд, рк╕рлБрк░ркХрлНрк╖рк┐ркд рклрлНрк░рлЗркирлНркЪрк╛ркЗркЭ рккрк╕ркВркж ркХрк░рлЛ ркЫрлЛ" },
            { key: "moderate", label: "ркоркзрлНркпрко ркЬрлЛркЦрко", description: "ркЬрлЛркЦрко ркЕркирлЗ рк╡рк│ркдрк░ркирлЛ рк╕ркВркдрлБрк▓рк┐ркд ркЕркнрк┐ркЧрко" },
            { key: "high", label: "ркЙркЪрлНркЪ ркЬрлЛркЦрко", description: "рк╡ркзрлБ рк╡рк│ркдрк░ ркорк╛ркЯрлЗ ркЬрлЛркЦрко рк▓рлЗрк╡рк╛ ркдрлИркпрк╛рк░" }
          ]
        },
        Marathi: {
          question: "рдпрд╛ рдЧреБрдВрддрд╡рдгреБрдХреАрд╕рд╛рдареА рддреБрдордЪреА рдЬреЛрдЦреАрдо рд╕рд╣рдирд╢реАрд▓рддрд╛ рдХрд╛рдп рдЖрд╣реЗ?",
          options: [
            { key: "low", label: "рдХрдореА рдЬреЛрдЦреАрдо", description: "рдкреНрд░рд╕реНрдерд╛рдкрд┐рдд, рд╕реБрд░рдХреНрд╖рд┐рдд рдлреНрд░рдБрдЪрд╛рдпрдЭреА рдкрд╕рдВрдж рдХрд░рддрд╛рдд" },
            { key: "moderate", label: "рдордзреНрдпрдо рдЬреЛрдЦреАрдо", description: "рдЬреЛрдЦреАрдо рдЖрдгрд┐ рдкрд░рддрд╛рд╡реНрдпрд╛рдЪрд╛ рд╕рдВрддреБрд▓рд┐рдд рджреГрд╖реНрдЯрд┐рдХреЛрди" },
            { key: "high", label: "рдЙрдЪреНрдЪ рдЬреЛрдЦреАрдо", description: "рдЬрд╛рд╕реНрдд рдкрд░рддрд╛рд╡реНрдпрд╛рд╕рд╛рдареА рдЬреЛрдЦреАрдо рдШреЗрдгреНрдпрд╛рд╕ рддрдпрд╛рд░" }
          ]
        },
        Tamil: {
          question: "роЗроирпНрод роорпБродро▓рпАроЯрпНроЯро┐ро▒рпНроХро╛рой роЙроЩрпНроХро│рпН ро░ро┐ро╕рпНроХрпН роЯро╛ро▓ро░ройрпНро╕рпН роОройрпНрой?",
          options: [
            { key: "low", label: "роХрпБро▒рпИроирпНрод ро░ро┐ро╕рпНроХрпН", description: "роиро┐ро▒рпБро╡рокрпНрокроЯрпНроЯ, рокро╛родрпБроХро╛рокрпНрокро╛рой роЙро░ро┐роорпИропро╛ро│ро░рпНроХро│рпИ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпЗройрпН" },
            { key: "moderate", label: "рооро┐родрооро╛рой ро░ро┐ро╕рпНроХрпН", description: "ро░ро┐ро╕рпНроХрпН рооро▒рпНро▒рпБроорпН ро╡ро░рпБрооро╛ройродрпНродро┐ройрпН роЪроороиро┐ро▓рпИ роЕрогрпБроХрпБроорпБро▒рпИ" },
            { key: "high", label: "роЕродро┐роХ ро░ро┐ро╕рпНроХрпН", description: "роЕродро┐роХ ро╡ро░рпБрооро╛ройродрпНродро┐ро▒рпНроХро╛роХ ро░ро┐ро╕рпНроХрпН роОроЯрпБроХрпНроХ родропро╛ро░ро╛роХ роЙро│рпНро│рпЗройрпН" }
          ]
        },
        Telugu: {
          question: "р░И р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐р░Хр░┐ р░ор▒А р░░р░┐р░╕р▒Нр░Хр▒Н р░Яр░╛р░▓р░░р▒Жр░ир▒Нр░╕р▒Н р░Пр░ор░┐р░Яр░┐?",
          options: [
            { key: "low", label: "р░др░Хр▒Нр░Хр▒Бр░╡ р░░р░┐р░╕р▒Нр░Хр▒Н", description: "р░╕р▒Нр░ер░╛р░кр░┐р░др░ор▒Ир░и, р░╕р▒Бр░░р░Хр▒Нр░╖р░┐р░др░ор▒Ир░и р░лр▒Нр░░р░╛р░Вр░Ър▒Ир░Ьр▒Ар░▓р░ир▒Б р░Зр░╖р▒Нр░Яр░кр░бр░др░╛р░░р▒Б" },
            { key: "moderate", label: "р░ор░┐р░др░ор▒Ир░и р░░р░┐р░╕р▒Нр░Хр▒Н", description: "р░░р░┐р░╕р▒Нр░Хр▒Н р░ор░░р░┐р░пр▒Б р░░р░┐р░Яр░░р▒Нр░ир▒НтАМр░▓ р░╕р░ор░др▒Бр░▓р▒Нр░п р░╡р░┐р░зр░╛р░ир░В" },
            { key: "high", label: "р░Ер░зр░┐р░Х р░░р░┐р░╕р▒Нр░Хр▒Н", description: "р░Ор░Хр▒Нр░Хр▒Бр░╡ р░░р░┐р░Яр░░р▒Нр░ир▒НтАМр░▓ р░Хр▒Лр░╕р░В р░░р░┐р░╕р▒Нр░Хр▒Н р░др▒Ар░╕р▒Бр░Хр▒Лр░╡р░бр░╛р░ир░┐р░Хр░┐ р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б" }
          ]
        }
      },
      4: {
        English: {
          question: "When are you looking to start your franchise?",
          options: [
            { key: "asap", label: "As soon as possible", description: "Ready to start immediately" },
            { key: "3months", label: "Within 3 months", description: "Planning to start in 3 months" },
            { key: "6months", label: "Within 6 months", description: "Planning to start in 6 months" },
            { key: "exploring", label: "Just exploring", description: "Still researching options" }
          ]
        },
        Hindi: {
          question: "рдЖрдк рдЕрдкрдиреА рдлреНрд░реИрдВрдЪрд╛рдЗрдЬрд╝реА рдХрдм рд╢реБрд░реВ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
          options: [
            { key: "asap", label: "рдЬрд▓реНрдж рд╕реЗ рдЬрд▓реНрдж", description: "рддреБрд░рдВрдд рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░" },
            { key: "3months", label: "3 рдорд╣реАрдиреЗ рдХреЗ рднреАрддрд░", description: "3 рдорд╣реАрдиреЗ рдореЗрдВ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреА рдпреЛрдЬрдирд╛" },
            { key: "6months", label: "6 рдорд╣реАрдиреЗ рдХреЗ рднреАрддрд░", description: "6 рдорд╣реАрдиреЗ рдореЗрдВ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреА рдпреЛрдЬрдирд╛" },
            { key: "exploring", label: "рд╕рд┐рд░реНрдл рдЦреЛрдЬ рд░рд╣рд╛ рд╣реВрдВ", description: "рдЕрднреА рднреА рд╡рд┐рдХрд▓реНрдкреЛрдВ рдкрд░ рд╢реЛрдз рдХрд░ рд░рд╣рд╛ рд╣реВрдВ" }
          ]
        },
        Gujarati: {
          question: "ркдркорлЗ ркдркорк╛рк░рлА рклрлНрк░рлЗркирлНркЪрк╛ркЗркЭ ркХрлНркпрк╛рк░рлЗ рк╢рк░рлВ ркХрк░рк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?",
          options: [
            { key: "asap", label: "рк╢ркХрлНркп ркдрлЗркЯрк▓рлА ркЬрк▓рлНркжрлА", description: "ркдрк░ркд ркЬ рк╢рк░рлВ ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркдрлИркпрк╛рк░" },
            { key: "3months", label: "3 ркорк╣рк┐ркирк╛ркорк╛ркВ", description: "3 ркорк╣рк┐ркирк╛ркорк╛ркВ рк╢рк░рлВ ркХрк░рк╡рк╛ркирлА ркпрлЛркЬркирк╛" },
            { key: "6months", label: "6 ркорк╣рк┐ркирк╛ркорк╛ркВ", description: "6 ркорк╣рк┐ркирк╛ркорк╛ркВ рк╢рк░рлВ ркХрк░рк╡рк╛ркирлА ркпрлЛркЬркирк╛" },
            { key: "exploring", label: "рклркХрлНркд рк╢рлЛркз рк░рк╣рлНркпрк╛ ркЫрлАркП", description: "рк╣ркЬрлБ рккркг рк╡рк┐ркХрк▓рлНрккрлЛркирлБркВ рк╕ркВрк╢рлЛркзрки ркХрк░рлА рк░рк╣рлНркпрк╛ ркЫрлАркП" }
          ]
        },
        Marathi: {
          question: "рддреБрдореНрд╣реА рддреБрдордЪреЗ рдлреНрд░рдБрдЪрд╛рдпрдЭреА рдХрдзреА рд╕реБрд░реВ рдХрд░реВ рдЗрдЪреНрдЫрд┐рддрд╛?",
          options: [
            { key: "asap", label: "рд╢рдХреНрдп рддрд┐рддрдХреНрдпрд╛ рд▓рд╡рдХрд░", description: "рд▓рдЧреЗрдЪ рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рддрдпрд╛рд░" },
            { key: "3months", label: "3 рдорд╣рд┐рдиреНрдпрд╛рдВрдд", description: "3 рдорд╣рд┐рдиреНрдпрд╛рдВрдд рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рдЪреА рдпреЛрдЬрдирд╛" },
            { key: "6months", label: "6 рдорд╣рд┐рдиреНрдпрд╛рдВрдд", description: "6 рдорд╣рд┐рдиреНрдпрд╛рдВрдд рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рдЪреА рдпреЛрдЬрдирд╛" },
            { key: "exploring", label: "рдлрдХреНрдд рд╢реЛрдзрдд рдЖрд╣реЗ", description: "рдЕрдЬреВрдирд╣реА рдкрд░реНрдпрд╛рдпрд╛рдВрд╡рд░ рд╕рдВрд╢реЛрдзрди рдХрд░рдд рдЖрд╣реЗ" }
          ]
        },
        Tamil: {
          question: "роЙроЩрпНроХро│рпН роЙро░ро┐роорпИропро╛ро│ро░рпН роОрокрпНрокрпЛродрпБ родрпКроЯроЩрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
          options: [
            { key: "asap", label: "роорпБроЯро┐роирпНродро╡ро░рпИ ро╡ро┐ро░рпИро╡ро┐ро▓рпН", description: "роЙроЯройроЯро┐ропро╛роХ родрпКроЯроЩрпНроХ родропро╛ро░ро╛роХ роЙро│рпНро│рпЗройрпН" },
            { key: "3months", label: "3 рооро╛родроЩрпНроХро│рпБроХрпНроХрпБро│рпН", description: "3 рооро╛родроЩрпНроХро│ро┐ро▓рпН родрпКроЯроЩрпНроХ родро┐роЯрпНроЯрооро┐роЯрпНроЯрпБро│рпНро│рпЗройрпН" },
            { key: "6months", label: "6 рооро╛родроЩрпНроХро│рпБроХрпНроХрпБро│рпН", description: "6 рооро╛родроЩрпНроХро│ро┐ро▓рпН родрпКроЯроЩрпНроХ родро┐роЯрпНроЯрооро┐роЯрпНроЯрпБро│рпНро│рпЗройрпН" },
            { key: "exploring", label: "ро╡рпЖро▒рпБроорпН роЖро░ро╛ропрпНроЪрпНроЪро┐", description: "роЗройрпНройрпБроорпН ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИ роЖро░ро╛ропрпНроирпНродрпБ ро╡ро░рпБроХро┐ро▒рпЗройрпН" }
          ]
        },
        Telugu: {
          question: "р░ор▒Ар░░р▒Б р░ор▒А р░лр▒Нр░░р░╛р░Вр░Ър▒Ир░Ьр▒Ар░ир░┐ роОр░кр▒Нр░кр▒Бр░бр▒Б р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р▒Б?",
          options: [
            { key: "asap", label: "р░╡р▒Ар░▓р▒Ир░ир░Вр░д р░др▒Нр░╡р░░р░Чр░╛", description: "р░╡р▒Жр░Вр░Яр░ир▒З р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б" },
            { key: "3months", label: "3 р░ир▒Жр░▓р░▓р▒Нр░▓р▒Л", description: "3 р░ир▒Жр░▓р░▓р▒Нр░▓р▒Л р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър▒З р░кр▒Нр░▓р░╛р░ир▒Н" },
            { key: "6months", label: "6 р░ир▒Жр░▓р░▓р▒Нр░▓р▒Л", description: "6 р░ир▒Жр░▓р░▓р▒Нр░▓р▒Л р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър▒З р░кр▒Нр░▓р░╛р░ир▒Н" },
            { key: "exploring", label: "р░Хр▒Зр░╡р░▓р░В р░Ер░ир▒Нр░╡р▒Зр░╖р░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б", description: "р░Зр░Вр░Хр░╛ р░Ор░Вр░кр░┐р░Хр░▓р░ир▒Б р░кр░░р░┐р░╢р▒Лр░зр░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б" }
          ]
        }
      }
    };

    return questions[step]?.[language] || questions[step]?.["English"];
  };

  const handleStartChat = (info) => {
    setUserInfo(info);
    const questionData = getQuestionData(1, info.language);
    const greeting = getGreeting(info.name, info.budget, info.language);
    
    setMessages([
      {
        id: 1,
        sender: "bot",
        timestamp: new Date(),
        text: `${greeting}\n\n${questionData.question}`,
        options: questionData.options
      },
    ]);
    setChatPhase("chatting");
    setCurrentQuestionStep(1);
  };

  const handleOptionSelect = async (option) => {
    const userMessage = {
      id: messages.length + 1,
      text: `${option.label} - ${option.description}`,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setIsLoading(true);

    // Store the response
    const responseKey = {
      1: 'industry',
      2: 'experience', 
      3: 'riskTolerance',
      4: 'timeline'
    }[currentQuestionStep];

    const newResponses = {
      ...userResponses,
      [responseKey]: option.label
    };
    setUserResponses(newResponses);

    try {
      if (currentQuestionStep < 4) {
        // Move to next question
        const nextStep = currentQuestionStep + 1;
        const questionData = getQuestionData(nextStep, userInfo.language);
        
        setTimeout(() => {
          setMessages((prev) => [
            ...prev,
            {
              id: prev.length + 1,
              text: questionData.question,
              sender: "bot",
              timestamp: new Date(),
              options: questionData.options
            },
          ]);
          setCurrentQuestionStep(nextStep);
          setIsLoading(false);
        }, 1000);
      } else {
        // Save chat lead first
        await saveChatLead(newResponses, userInfo);
        
        setTimeout(async () => {
          const matches = await findMatchingBrands(newResponses, userInfo);
          setMatchedBrands(matches);
          
          if (matches.length > 0) {
            const recommendationMsg = getRecommendationMessage(matches.length, userInfo.language);
            setMessages((prev) => [
              ...prev,
              {
                id: prev.length + 1,
                text: recommendationMsg,
                sender: "bot",
                timestamp: new Date(),
                recommendations: matches
              },
            ]);
          } else {
            const noMatchMsg = getNoMatchMessage(userInfo.language);
            setMessages((prev) => [
              ...prev,
              {
                id: prev.length + 1,
                text: noMatchMsg,
                sender: "bot",
                timestamp: new Date(),
                showBrowseButton: true
              },
            ]);
          }
          setChatPhase("recommendations");
          setIsLoading(false);
        }, 1500);
      }
    } catch (error) {
      logger.error("Error processing response:", error);
      setIsLoading(false);
    }
  };

  const handleBrandClick = (brand) => {
    // Generate consistent URL-friendly slug
    const slug = generateBrandSlug(brand.brandName);
    
    // Open brand page in new window/tab instead of navigating away
    const brandUrl = `${window.location.origin}/brands/${slug || brand.id}`;
    window.open(brandUrl, '_blank', 'noopener,noreferrer');
    
    // Don't close the chat - keep it open so user can see chat content
    // setOpen(false); // Removed this line
  };

  const handleClose = () => {
    setOpen(false);
  };

  const formatInvestmentAmount = (amount) => {
    if (!amount) return "Contact for details";
    const numAmount = parseInt(amount.toString().replace(/[тВ╣,]/g, ''));
    if (numAmount >= 100000) {
      return `тВ╣${(numAmount / 100000).toFixed(1)}L`;
    } else if (numAmount >= 1000) {
      return `тВ╣${(numAmount / 1000).toFixed(0)}K`;
    }
    return `тВ╣${numAmount}`;
  };

  return (
    <>
      <Fab
        color="primary"
        sx={{
          position: "fixed",
          bottom: 24,
          right: 24,
          zIndex: 1300,
          width: 64,
          height: 64,
        }}
        onClick={() => setOpen(true)}
      >
        <Badge badgeContent="New" color="secondary" variant="dot">
          <ChatIcon />
        </Badge>
      </Fab>

      <Dialog
        open={open}
        onClose={handleClose}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            height: "80vh",
            maxHeight: 700,
            position: "fixed",
            bottom: { xs: 0, sm: 100 },
            right: { xs: 0, sm: 24 },
            m: 0,
            maxWidth: 420,
            borderRadius: { xs: 0, sm: 4 },
            width: "100%",
          },
        }}
      >
        <DialogTitle
          sx={{
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
            pb: 1,
            background: "linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)",
            color: "white"
          }}
        >
          <Box sx={{ display: "flex", alignItems: "center" }}>
            <Avatar sx={{ mr: 2, backgroundColor: "rgba(255,255,255,0.2)" }}>
              <Support />
            </Avatar>
            <Box>
              <Typography variant="h6" fontWeight="bold">
                FranchiseHub Assistant
              </Typography>
              <Typography variant="caption" sx={{ opacity: 0.9, display: "flex", alignItems: "center", gap: 0.5 }}>
                Find your perfect franchise match
                {chatPhase === "recommendations" && (
                  <>
                    <Launch fontSize="inherit" sx={{ ml: 1 }} />
                    Links open in new tabs
                  </>
                )}
              </Typography>
            </Box>
          </Box>
          <IconButton onClick={handleClose} sx={{ color: "white" }} aria-label="Close chatbot">
            <Close />
          </IconButton>
        </DialogTitle>

        <Divider />

        <DialogContent
          sx={{
            p: 0,
            display: "flex",
            flexDirection: "column",
            height: "100%",
          }}
        >
          {chatPhase === "pre-chat" ? (
            <UserInfoForm onStartChat={handleStartChat} />
          ) : (
            <>
              <Box sx={{ flexGrow: 1, p: 2, overflowY: "auto" }}>
                {messages.map((message) => (
                  <Box key={message.id}>
                    <Box
                      sx={{
                        display: "flex",
                        justifyContent:
                          message.sender === "user" ? "flex-end" : "flex-start",
                        mb: 2,
                      }}
                    >
                      <Paper
                        sx={{
                          p: 2,
                          maxWidth: "85%",
                          backgroundColor:
                            message.sender === "user"
                              ? "primary.main"
                              : "grey.100",
                          color:
                            message.sender === "user"
                              ? "white"
                              : "text.primary",
                          borderRadius:
                            message.sender === "user"
                              ? "20px 20px 4px 20px"
                              : "20px 20px 20px 4px",
                        }}
                      >
                        <Typography variant="body1" sx={{ whiteSpace: 'pre-line' }}>
                          {message.text}
                        </Typography>
                      </Paper>
                    </Box>

                    {/* Options for bot messages - Using Chips */}
                    {message.sender === "bot" && message.options && (
                      <Box sx={{ mb: 2, px: 1 }}>
                        <Typography 
                          variant="caption" 
                          color="text.secondary" 
                          sx={{ mb: 1, display: "block" }}
                        >
                          {userInfo?.language === "Hindi" 
                            ? "рдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ:"
                            : "Choose an option:"}
                        </Typography>
                        <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1, justifyContent: "flex-start" }}>
                          {message.options.map((option) => (
                            <Chip
                              key={option.key}
                              label={option.label}
                              onClick={() => handleOptionSelect(option)}
                              color="primary"
                              variant="outlined"
                              sx={{
                                cursor: "pointer",
                                mb: 1,
                                transition: "all 0.3s ease",
                                borderRadius: "20px",
                                border: "2px solid",
                                borderColor: "primary.main",
                                backgroundColor: "transparent",
                                color: "primary.main",
                                "&:hover": {
                                  backgroundColor: "primary.main",
                                  color: "white",
                                  transform: "translateY(-2px)",
                                  boxShadow: "0 4px 12px rgba(25, 118, 210, 0.3)",
                                  "& .MuiChip-label": {
                                    color: "white",
                                  }
                                },
                                "&:active": {
                                  transform: "translateY(0px)",
                                },
                                fontSize: "0.875rem",
                                height: "40px",
                                "& .MuiChip-label": {
                                  padding: "0 16px",
                                  fontWeight: "500",
                                  color: "inherit"
                                }
                              }}
                              title={option.description} // Tooltip for description
                            />
                          ))}
                        </Box>
                        
                        {/* Helper text showing that descriptions are available on hover */}
                        <Typography 
                          variant="caption" 
                          color="text.disabled" 
                          sx={{ mt: 1, display: "block", fontStyle: "italic" }}
                        >
                          ЁЯТб Hover over options to see details
                        </Typography>
                      </Box>
                    )}

                    {/* Brand Recommendations */}
                    {message.sender === "bot" && message.recommendations && (
                      <Box sx={{ mb: 2 }}>
                        <Stack spacing={2}>
                          {message.recommendations.map((brand, index) => (
                            <Card 
                              key={brand.id}
                              sx={{ 
                                cursor: "pointer",
                                transition: "all 0.3s",
                                "&:hover": { 
                                  transform: "translateY(-3px)",
                                  boxShadow: 6 
                                },
                                border: index === 0 ? "2px solid #1976d2" : "1px solid #e0e0e0"
                              }}
                              onClick={() => handleBrandClick(brand)}
                            >
                              {index === 0 && (
                                <Box sx={{ 
                                  background: "linear-gradient(135deg, #1976d2, #42a5f5)",
                                  color: "white",
                                  px: 2,
                                  py: 0.5,
                                  display: "flex",
                                  alignItems: "center",
                                  justifyContent: "center",
                                  gap: 1
                                }}>
                                  <Star fontSize="small" />
                                  <Typography variant="caption" fontWeight="bold">
                                    BEST MATCH
                                  </Typography>
                                </Box>
                              )}
                              <CardContent>
                                <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "flex-start", mb: 1 }}>
                                  <Typography variant="h6" fontWeight="bold">
                                    {brand.brandName}
                                  </Typography>
                                  <Chip 
                                    label={`${brand.matchScore}% Match`} 
                                    color="success" 
                                    size="small"
                                    icon={<CheckCircle />}
                                  />
                                </Box>
                                
                                <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1, mb: 2 }}>
                                  {brand.industries?.slice(0, 2).map((industry) => (
                                    <Chip key={industry} label={industry} size="small" color="primary" variant="outlined" />
                                  ))}
                                </Box>

                                <Grid container spacing={1} sx={{ mb: 2 }}>
                                  <Grid item xs={6}>
                                    <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                                      <AttachMoney fontSize="small" color="primary" />
                                      <Box>
                                        <Typography variant="caption" color="text.secondary">Investment</Typography>
                                        <Typography variant="body2" fontWeight="bold">
                                          {brand.investmentRange}
                                        </Typography>
                                      </Box>
                                    </Box>
                                  </Grid>
                                  <Grid item xs={6}>
                                    <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                                      <TrendingUp fontSize="small" color="primary" />
                                      <Box>
                                        <Typography variant="caption" color="text.secondary">Royalty</Typography>
                                        <Typography variant="body2" fontWeight="bold">
                                          {brand.royaltyFee}%
                                        </Typography>
                                      </Box>
                                    </Box>
                                  </Grid>
                                </Grid>

                                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                                  {brand.brandMission?.substring(0, 100)}...
                                </Typography>

                                <Box sx={{ mb: 2 }}>
                                  <Typography variant="caption" color="text.secondary" fontWeight="bold">
                                    Why it's perfect for you:
                                  </Typography>
                                  {brand.matchReasons?.slice(0, 2).map((reason, idx) => (
                                    <Typography key={idx} variant="caption" display="block" color="success.main">
                                      тЬУ {reason}
                                    </Typography>
                                  ))}
                                </Box>
                              </CardContent>
                              <CardActions sx={{ justifyContent: "space-between", px: 2, pb: 2 }}>
                                <Button 
                                  variant="contained" 
                                  color="primary" 
                                  size="small"
                                  endIcon={<Launch />}
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    handleBrandClick(brand);
                                  }}
                                >
                                  {getButtonText('viewDetails', userInfo?.language)}
                                </Button>
                                <Typography variant="caption" color="text.secondary" sx={{ display: "flex", alignItems: "center", gap: 0.5 }}>
                                  <Launch fontSize="inherit" />
                                  {getButtonText('opensInNewTab', userInfo?.language)}
                                </Typography>
                              </CardActions>
                            </Card>
                          ))}
                        </Stack>
                      </Box>
                    )}

                    {/* Browse All Button */}
                    {message.sender === "bot" && message.showBrowseButton && (
                      <Box sx={{ mb: 2, textAlign: "center" }}>
                        <Button 
                          variant="contained" 
                          color="primary"
                          onClick={() => {
                            const brandsUrl = `${window.location.origin}/brands`;
                            window.open(brandsUrl, '_blank', 'noopener,noreferrer');
                            // Keep chat open
                          }}
                        >
                          {getButtonText('browseAll', userInfo?.language)}
                        </Button>
                      </Box>
                    )}
                  </Box>
                ))}
                
                {isLoading && (
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "flex-start",
                      mb: 2,
                    }}
                  >
                    <Paper
                      sx={{
                        p: 2,
                        backgroundColor: "grey.100",
                        borderRadius: "20px 20px 20px 4px",
                      }}
                    >
                      <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                        <CircularProgress size={16} />
                        <Typography variant="body2">
                          Finding perfect matches...
                        </Typography>
                      </Box>
                    </Paper>
                  </Box>
                )}
                <div ref={chatEndRef} />
              </Box>

              {chatPhase === "recommendations" && (
                <Box sx={{ p: 2, borderTop: 1, borderColor: "divider", textAlign: "center" }}>
                  <Typography variant="caption" color="text.secondary" sx={{ mb: 2, display: "block" }}>
                    Need more help? Our franchise experts are here to assist you!
                  </Typography>
                  <Stack direction="row" spacing={1} justifyContent="center">
                    <Button 
                      variant="outlined" 
                      size="small"
                      onClick={() => {
                        const contactUrl = `${window.location.origin}/contact`;
                        window.open(contactUrl, '_blank', 'noopener,noreferrer');
                        // Keep chat open
                      }}
                    >
                      Contact Expert
                    </Button>
                    <Button 
                      variant="contained" 
                      size="small"
                      onClick={() => {
                        const brandsUrl = `${window.location.origin}/brands`;
                        window.open(brandsUrl, '_blank', 'noopener,noreferrer');
                        // Keep chat open
                      }}
                    >
                      View All Brands
                    </Button>
                  </Stack>
                </Box>
              )}
            </>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
};

export default Chatbot;