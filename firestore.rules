// Firestore Security Rules Template for Production
// Copy these to your Firebase Console -> Firestore -> Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    // --- Collection Rules ---
    
    match /admins/{userId} {
      allow get: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow list: if isAdmin();
      allow write: if false;
    }
    
    match /users/{userId} {
      allow get: if request.auth.uid == userId || isAdmin();
      allow list: if isAdmin();
      allow create, update: if request.auth.uid == userId || isAdmin();
    }
    
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
      // Allow any authenticated user to create notifications for admins (for brand submissions)
      allow create: if isSignedIn();
    }
    
    match /brands/{brandId} {
      // Anyone can read active brands, admins can read all brands, owners can read their own brands
      allow get: if resource.data.status == 'active' || isAdmin() || (isSignedIn() && request.auth.uid == resource.data.userId);
      // List: Public can list (will be filtered by client), admins can list all
      allow list: if true; // Client-side filtering will handle showing only active brands to public
      // Authenticated users can create their own brands
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      // Brand owners and admins can update
      allow update: if isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin());
      // Only admins can delete
      allow delete: if isAdmin();
    }
    
    match /brandfranchiseInquiry/{inquiryId} {
      allow create: if true;
      allow get: if isSignedIn() && (request.auth.uid == resource.data.brandOwnerId || isAdmin());
      // Allow authenticated users to list their own inquiries
      allow list: if isSignedIn();
      allow update, delete: if isAdmin();
    }
    
    match /brandViews/{brandId} {
      allow get: if isSignedIn() && (request.auth.uid == resource.data.brandOwnerId || isAdmin());
      // Allow authenticated users to list their own brand views
      allow list: if isSignedIn();
      allow create, update: if true; // Allow anonymous view tracking
      allow delete: if isAdmin();
    }
    
    match /contactUs/{contactId} {
        allow create: if true;
        allow read, update, delete: if isAdmin();
    }

    match /chatLeads/{leadId} {
        allow create: if true;
        allow read, update, delete: if isAdmin();
    }
    
    match /testimonials/{testimonialId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    match /faqs/{faqId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Test collection for debugging
    match /test/{testId} {
      allow read, write: if isSignedIn();
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}